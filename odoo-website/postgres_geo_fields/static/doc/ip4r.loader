/*  
 * Loading from a ZIP archive containing CSV files. The full test can be  
 * done with using the archive found at  
 * http://geolite.maxmind.com/download/geoip/database/GeoLiteCity_CSV/GeoLiteCity-latest.zip  
 *  
 * And a very light version of this data set is found at  
 * http://pgsql.tapoueh.org/temp/foo.zip for quick testing.  
 */  
 
LOAD ARCHIVE  
   FROM http://geolite.maxmind.com/download/geoip/database/GeoLiteCity_CSV/GeoLiteCity-latest.zip  
   INTO postgresql:///dermanord  
 
   BEFORE LOAD DO  
     $$ create extension if not exists ip4r; $$,
/*
     $$ create schema if not exists geolite; $$,
*/
     $$ create table if not exists public.location
       (
          locid      integer primary key,
          country    text,
          region     text,
          city       text,
          postalcode text,
          location   point,
          metrocode  text,
          areacode   text
       );
     $$,
     $$ create table if not exists public.blocks
       (
          iprange    ip4r,
          locid      integer
       );
     $$,
     $$ drop index if exists public.blocks_ip4r_idx; $$,
     $$ truncate table public.blocks, public.location cascade; $$
 
   LOAD CSV
        FROM FILENAME MATCHING ~/GeoLiteCity-Location.csv/
             WITH ENCODING iso-8859-1
             (
                locId,
                country,
                region	[null if blanks],
                city    [null if blanks],
                postalCode [null if blanks],
                latitude,
                longitude,
                metroCode  [null if blanks],
                areaCode   [null if blanks]
             )
        INTO postgresql:///dermanord?public.location
             (
                locid,country,region,city,postalCode,
                location point using (format nil "(~a,~a)" longitude latitude),
                metroCode,areaCode
             )
        WITH skip header = 2,
             fields optionally enclosed by '"',
             fields escaped by double-quote,
             fields terminated by ','

  AND LOAD CSV
        FROM FILENAME MATCHING ~/GeoLiteCity-Blocks.csv/
             WITH ENCODING iso-8859-1
             (
                startIpNum, endIpNum, locId
             )
        INTO postgresql:///dermanord?public.blocks
             (
                iprange ip4r using (ip-range startIpNum endIpNum),
                locId
             )
        WITH skip header = 2,
             fields optionally enclosed by '"',
             fields escaped by double-quote,
             fields terminated by ','

   FINALLY DO
     $$ create index blocks_ip4r_idx on public.blocks using gist(iprange); $$;

